/* GRID -> sistema de maquetación bidimensional*/

html {
  box-sizing: border-box;
  font-size: 14px;
  font-family: sans-serif;
  scroll-behavior: smooth;
}

*,
*::after,
*::before {
  box-sizing: inherit;
}

a[href="#top"] {
  margin: 1rem;
  display: block;
  font-size: 2rem;
  text-align: center;
  text-decoration: none;
}

p {
  margin: 0;
}

h2 {
  margin-top: 50vh;
  text-align: center;
}

img {
  margin: auto;
  display: block;
  max-width: 100%;
  height: auto;
}

.menu {
  margin-bottom: 100vh;
  font-size: 125%;
}

.menu li {
  margin-bottom: 1rem;
}

.container {
  margin: 0 auto;
  width: 80%;
  height: 80vh;
  background-color: #222;
  border: medium solid #000;
}

.item {
  padding: 0.5rem;
  font-size: 1rem;
  background-color: #666666;
  border: medium solid #999;
}

.grid-explicit {
  display: inline-grid;
  display: grid; /*para inicializar grid, valor por defecto*/
  /*cuadrícula de 3row*3col */
  grid-template-columns: 50% 100px 1fr; /*las columnas que se quieran separadas por espacios*/
  grid-template-rows: 2rem 20vh 30%; /*1fr -> fracción, el espacio sobrante*/

  /*para crear columnas y filas de un mismo tamaño*/
  /*Grid de 5x4*/
  grid-template-columns: repeat(5, 20%);
  grid-template-rows: repeat(4, 25%);
  grid-template-rows: repeat(4, auto);

  /*Grid de 4x5*/
  grid-template-columns: 20% 30% 30% 20%;
  grid-template-columns: 20% repeat(2, 30%) 20%;
  grid-template-rows: repeat(5, auto);
  grid-column-gap: 0.5rem; /*si el valor es definido, se desborda*/
  grid-row-gap: 0.25rem;
  /* grid-gap: 100px 0px; shortHand */
  column-gap: 1rem;
  row-gap: 0.5rem;
  gap: 1vh 1vw; /*shortHand, row column*/
  gap: 1vh 0;
  gap: 0 0;
}

.grid-explicit .item:nth-child(11) {
  color: cyan;
  grid-row-start: 2;
  grid-row-end: 3;
  grid-column-start: 2;
  grid-column-end: 3;
  grid-row: 1/2; /*shortcut*/
  grid-column: 3/4; /*shortcut*/
  grid-column: 3/5; /*para hacer un tipo de combinación de cuadrículas y se recorren las demás*/

  /*Otro atajo, grid-area -> grid-row-star/grid-column-star/grid-row-end/grid-column-end */
  grid-area: 1 / 3 / 2 / 5;
  grid-area: 2 / 3 / 3 / 5;
}

.grid-explicit .item:nth-child(12) {
  color: cyan;
  grid-row: span 2;
  grid-column: span 3;
}
.grid-explicit .item:nth-child(15) {
  color: cyan;
  grid-row: 1 / span 2;
  grid-column: 1 / span 2;
}

/* -------------------------------------------------------- */
/* GRID CON NOMBRES EN LÍNEA */
/*Utilizando nombres, puede ser muy verboso y muy confuso al trabajar*/

.grid-line-names {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(3, 1fr);

  grid-template-columns: [linea-c1] 1fr [linea-c2] 1fr [linea-c3] 1fr [linea-c4];
  grid-template-rows: [linea-r1] 1fr [linea-r2] 1fr [linea-r3] 1fr [linea-r4];
  grid-template-rows: [linea-r1] auto [linea-r2] auto [linea-r3] auto [linea-r4];
}

.grid-line-names .item:nth-child(3) {
  color: cyan;
  grid-row: linea-r3/linea-r4;
  grid-column: linea-c1/linea-c4;
  grid-area: linea-r3/linea-c1/linea-r4/linea-c4;
}

/* --------------------------------------------------------- */
/* GRID CON ÁREAS */
/*Para trabajar con áreas, es lo más recomendado en la mayoría de casos*/

.grid-areas {
  display: grid;
  /*Grid -> 2X3*/
  grid-template-columns: 1fr 200px;
  grid-template-rows: 100px repeat(2, 1fr) 60px;
  grid-template-areas:
    "header header"
    "content sidebar"
    "content ." /*para dejar una celda vacía, solo se coloca punto*/
    "footer footer";
}

/*el shorthand [grid-area] también sirve para dar nombres de las areas a las clases de los elementos*/

.header {
  grid-area: header;
}

.content {
  grid-area: content;
}

.sidebar {
  grid-area: sidebar;
}

.footer {
  grid-area: footer;
}

/* --------------------------------------------------------------------- */
/* - GRID IMPLÍCITA - */
/*Como se comportan los elementos explícitos e implícitos*/

.grid-implicit {
  /*Grid 4x3*/
  width: 40%;
  display: grid;
  display: inline-grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(3, 125px);
}

/* ------------------------------------------------------------------------ */
/* - FLUJO DE LA GRID - */
/* Para como aprovechar los espacios que quedan para les elementos implícitos, y tambien para aprovechar agunos espacios que por algún motivo quedan vacíos, para poder llenarlos o más bien utilizarlos*/

.grid-flow {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(3, 100px);
  grid-auto-flow: row; /*default*/
  grid-auto-flow: column;
  grid-auto-rows: auto; /*defualt*/
  grid-auto-rows: 75px;
  grid-auto-columns: 75px;
}

.grid-flow .item {
  font-size: 0.75rem;
}

/* - FLUJO DE UNA GRID DENSA - */

.grid-flow-dense {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  grid-template-rows: repeat(4, 150px);
  grid-auto-flow: row dense; /*hace que los espacios que no han sido ocupados, sean utilizados*/
}

.grid-flow-dense .item:nth-child(9) {
  color: cyan;
  grid-row: span 3;
  grid-column: span 3;
}

/* -------------------------------------------------------------------------- */
/* - GRID ITEMS EN CAPAS - */
/*para superposicón es mejor trabajarlo de esta manera, no es conveniente usar areas*/
.grid-layers {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(4, 1fr);
}

.grid-layers .item:nth-child(1) {
  background-color: #dbea33;
  grid-column: 1 /3;
  grid-row: 1/3;
}
.grid-layers .item:nth-child(2) {
  background-color: #497af8;
  grid-column: 3 /5;
  grid-row: 1/3;
}
.grid-layers .item:nth-child(3) {
  background-color: #90e971;
  grid-column: 1 /3;
  grid-row: 3 / 5;
}
.grid-layers .item:nth-child(4) {
  background-color: #f0952a;
  grid-column: 3 /5;
  grid-row: 3 / 5;
}
.grid-layers .item:nth-child(5) {
  background-color: #c92af075;
  grid-column: 2 /4;
  grid-row: 2 / 4;
}

/* ------------------------------------------------------------------- */
/* - ORDENAMIENTO DE GRID ITEMS - */

.grid-order {
  display: grid;
  /* Grid 3x2 */
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(2, 1fr);
}

/*order solo funciona en el flujo explícito de la grid*/
.grid-order .item:nth-child(1) {
  order: 1; /*defualt - flexbox*/
}
.grid-order .item:nth-child(2) {
  order: 2; /*defualt - flexbox*/
}
.grid-order .item:nth-child(5) {
  order: -1; /*defualt - flexbox*/
}

/* -------------------------------------------------------------------------- */
/* - ALINEAMIENTO DE GRID ITEMS - */

.grid-align {
  display: grid;
  /* Grid 3x2 */
  grid-template-columns: repeat(3, 150px);
  grid-template-rows: repeat(2, 150px);
  /*permite alinear las celdas de la grid en x, ajusta el elemento a su contenido y lo alinea según el 
  tamaño restante del ancho de la celda, si en dado caso aún lo hay*/
  justify-items: stretch; /*default*/
  justify-items: center;
  justify-items: start;
  justify-items: end;

  /*alinea en y*/
  align-items: stretch; /*defult*/
  align-items: start;
  align-items: end;
  align-items: center;
}

.grid-align .item:nth-child(4) {
  justify-self: start;
  align-self: start;
}

/* ------------------------------------------------------------------------------ */
/* ALINEAMINETO DE GRID TRACKS*/

.grid-align-tracks {
  display: grid;
  /* Grid 3x2 */
  grid-template-columns: repeat(3, 150px);
  grid-template-rows: repeat(2, 150px);
  /*justify-content, para alinear los tracks de la grid en el eje horizontal (X)*/
  justify-content: start; /*default*/
  justify-content: end;
  justify-content: center;
  justify-content: space-between;
  justify-content: space-around;
  justify-content: space-evenly;

  /*align-content, para alinear los tracks de la grid en el eje vertical (Y)*/
  align-content: start; /*default*/
  align-content: end;
  align-content: center;
  align-content: space-between;
  align-content: space-around;
  align-content: space-evenly;
}

/* ----------------------------------------------------------------------------- */
/* TAMAÑOS MÁXIMOS Y MÍNIMOS DE GRID TRACKS */

.grid-min-max {
  display: grid;
  /*Grid 4x?*/
  grid-template-columns: repeat(4, 1fr);

  /*siempre lleva 2 valores*/
  grid-template-columns: repeat(4, minmax(100px, 200px));
  grid-template-columns: repeat(4, minmax(min-content, 200px));
  grid-template-columns: repeat(4, minmax(100px, min-content));
  grid-template-columns: repeat(4, minmax(100px, max-content));
  grid-template-columns: repeat(4, minmax(max-content, 200px));
  grid-template-columns: repeat(4, minmax(min-content, max-content));
}

/* ----------------------------------------------------------------------------- */
/* Las maneras que se pueden repetir los patrones para las columnas y filas*/

.grid-repeat {
  display: grid;
  /* 4 x ? */
  /*La función repeat solo se puede usar en grid-template-columns y grid-template-rows*/
  grid-template-columns: repeat(4, 1fr);
  grid-template-columns: repeat(4, 10% 20% 30% 40%);
  grid-template-columns: repeat(2, 10% 20% 30% 40%);
  /*esto quiere decir 4x4*/
  grid-template-columns: repeat(1, 10% 20% 30% 40%);
  grid-template-rows: repeat(2, 10vh 20vh);
  /**/
  grid-auto-flow: row; /*solo como referencia, porque el flujo ya se encuentra en filas*/
  grid-auto-rows: 100px;
}

/* ------------------------------------------------------------------------------- */
/* GRID DINÁMICAS*/

.grid-dynamics {
  display: grid;
  /*Grid 4x?*/
  grid-template-columns: repeat(4, 100px);
  /*auto-fill rellana la grid con tracks generados dinámicamente*/
  grid-template-columns: repeat(auto-fill, 100px);
  /*auto-fit ajusta la grid con los tracks existentes*/
  grid-template-columns: repeat(auto-fit, 100px);

  /*cuando llega a 100px entonces un elemento se baja y los restantes
  obtienen el maximo de lo que se pueden repartir del elemente padre*/
  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
  /*de una vez de ajusta al tamaño del elemento grid padre*/
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
}

/* --------------------------------------------------------------------------------- */
/* RESPONSIVE SIN MEDIA QUERIES */

.grid-responsive {
  display: grid;
  /*auto-fit, ajustate a los elemento que tienes disponibles*/
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 0;
}

/* --------------------------------------------------------------------------------- */
/* GRID ANANIDADOS Y SUBGRIDS*/

.grid-nested {
  display: grid;
  /*Grid 3x?*/
  grid-template-columns: repeat(3, 1fr);
}

.sub-item {
  padding: 0.5rem;
  background-color: #ddd;
  border: thin solid #cccc56;
}

.grid {
  display: grid;
  /*Grid de 3x2*/
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(4, 1fr);
}

.subgrid {
  /*Subgrid solo esta soportado por firefox y safari, revisar siempre can i use*/
  /*Para que la característica de subgrid funciones es necesario hacer lo siguiente:
  1) Definir explícitamente el tamaño que ocupará el elemento que aplicará subgrid dentro del contenedor padre
  grid, es decir definir sus propiedades grid-column y grid-row o grid-area
  2) Aplicar display grid al elemento que aplicará subgrid
  3) Aplicar el valor subgrid a las columnas, o a las filas o ambas depende de cómo se requiera
  */
  grid-column: span 3;
  grid-row: span 2;
  display: grid;
  grid-template-columns: subgrid;
  grid-template-rows: subgrid;
}
